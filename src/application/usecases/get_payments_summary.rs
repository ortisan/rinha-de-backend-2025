use crate::application::domain::payment::{GetPaymentsFilter, PaymentsSummary};use crate::application::repositories::payment_repository::PaymentRepository;use crate::application::usecases::usecase::Usecase;use crate::infrastructure;use log::debug;pub struct GetPaymentsSummaryUsecase {    payment_repository: Box<dyn PaymentRepository>,}impl GetPaymentsSummaryUsecase {    pub fn new(payment_repository: Box<dyn PaymentRepository>) -> Self {        GetPaymentsSummaryUsecase { payment_repository }    }}impl Usecase<GetPaymentsFilter, PaymentsSummary> for GetPaymentsSummaryUsecase {    async fn execute(        &self,        get_payments_filter: GetPaymentsFilter,    ) -> infrastructure::Result<PaymentsSummary> {        debug!("Searching payments between {} and {}", &get_payments_filter.from, &get_payments_filter.to);        self.payment_repository            .get_summary(get_payments_filter.from, get_payments_filter.to)            .await    }}